version: "3"

# CONFS
networks:
#de common
  traefik_net:
    name: traefik_net
    external: true

  containers_wp:
    name: containers_wp #red con puertos abiertos  

#volumen docker para mysql
volumes:
  wp-mysql:
    name: ${PROJECT_NAME}-mysql # Real ending name
    external: false
  wp-mysql-backup:
    name: ${PROJECT_NAME}-mysql-backup # Real ending name
    external: false

#WOBDY
services:
  mariadb:
    image: wodby/mariadb:$MARIADB_TAG
    container_name: "${PROJECT_NAME}_mariadb"
    stop_grace_period: 30s
    environment:
      #MYSQL_RANDOM_ROOT_PASSWORD: "yes" #preconf
      #valores de env o vars defecto
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-K9AS9cBaSPTEK8dS}
      MYSQL_DATABASE: ${DB_NAME:-alsurwp} #wordpress??
      MYSQL_USER: ${DB_USER:-alsurwp} #wordpress??
      MYSQL_PASSWORD: ${DB_PASSWORD:-pbvhxy3wAW6VxJTR} 
#    volumes:
#    - ./mariadb-init:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
#    - /path/to/mariadb/data/on/host:/var/lib/mysql # I want to manage volumes manually.

    volumes:
      - $MYSQL_INIT:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
      - wp-mysql:/var/lib/mysql # I want to manage volumes manually.

    networks:
      - containers_wp   

    ports:  #debería ir a override o dev
      - '3306:3306'   

  php:
    image: wodby/wordpress-php:$PHP_TAG
    container_name: "${PROJECT_NAME}_php"
    environment:
      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S mailhog:1025
      DB_HOST: $DB_HOST
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
      DB_NAME: $DB_NAME
      PHP_FPM_USER: wodby
      PHP_FPM_GROUP: wodby

      #alsur valores php ajustados (ver https://kutt.it/NcHrkL)
      PHP_DATE_TIMEZONE: "Europe/Madrid" #@todo conf de entorno mediante TZ
      # PHP_MAX_EXECUTION_TIME
      # PHP_MAX_EXECUTION_TIME
      # PHP_POST_MAX_SIZE
      # PHP_UPLOAD_MAX_FILESIZE
      # GIT_USER_EMAIL
      # GIT_USER_EMAIL

      # se debe sobreescribir en el override.env
      # PHP_DISPLAY_ERRORS: Off


      #alsur wp-content variables
      WP_PLUGIN_DIR: $WP_PLUGIN_DIR
      WP_PLUGIN_URL: $WP_PLUGIN_URL
      WP_CONTENT_DIR: $WP_CONTENT_DIR
      WP_CONTENT_URL: $WP_CONTENT_URL
      USING_DOCKER: 1  #USO? (legacy?)
#      # Read instructions at https://wodby.com/docs/stacks/wordpress/local#xdebug
#      PHP_XDEBUG: 1
#      PHP_XDEBUG_DEFAULT_ENABLE: 1
#      PHP_XDEBUG_REMOTE_CONNECT_BACK: 0
#      PHP_IDE_CONFIG: serverName=my-ide
#      PHP_XDEBUG_IDEKEY: "my-ide"
#      PHP_XDEBUG_REMOTE_HOST: 172.17.0.1 # Linux
#      PHP_XDEBUG_REMOTE_HOST: 10.254.254.254 # macOS
#      PHP_XDEBUG_REMOTE_HOST: 10.0.75.1 # Windows
    volumes:
    #- ./:/var/www/html:cached
    - $PROJECT_WWW_PATH_BASE:/var/www/html:cached   #cached- base wp
    - $PROJECT_WWW_PATH_PROJECT/plugins:/var/www/html/$VAR_WP_CONTENT/plugins:cached #carpeta plugins
    - $PROJECT_WWW_PATH_PROJECT/themes:/var/www/html/$VAR_WP_CONTENT/themes:cached #carpeta themes
    - $PROJECT_WWW_PATH_PROJECT/wp-config.php:/var/www/html/wp-config.php:cached #wp-config.php

    #nosync
    -  $PROJECT_WWW_PATH_NOSYNC/uploads:/var/www/html/$VAR_WP_CONTENT/uploads #carpeta themes
    -  $PROJECT_WWW_PATH_NOSYNC/cache:/var/www/html/$VAR_WP_CONTENT/cache #carpeta themes
    -  $PROJECT_WWW_PATH_NOSYNC/updraft:/var/www/html/$VAR_WP_CONTENT/updraft #carpeta themes
    -  $PROJECT_WWW_PATH_NOSYNC/wflogs:/var/www/html/$VAR_WP_CONTENT/wflogs #carpeta themes

    networks:
      - containers_wp

  nginx:
    image: wodby/nginx:$NGINX_TAG
    container_name: "${PROJECT_NAME}_nginx"
    depends_on:
    - php
    environment:
      NGINX_STATIC_OPEN_FILE_CACHE: "off"  #@todo override para dev
      NGINX_ERROR_LOG_LEVEL: debug  #@todo override para dev
      NGINX_BACKEND_HOST: php
      NGINX_VHOST_PRESET: wordpress_alsur # vs wordpress (tpl propio con cont instead of wp-content), requiere montaje etc
      #NGINX_SERVER_ROOT: /var/www/html/subdir

      #alsur envs de interes - ver https://kutt.it/2CDeQW
      #NGINX_MODSECURITY_ENABLED
      #NGINX_PAGESPEED_ENABLE_FILTERS
      #NGINX_PAGESPEED_ENABLED
      #NGINX_PAGESPEED_FILE_CACHE_PATH
      #NGINX_PAGESPEED_REWRITE_LEVEL

    volumes_from:
      - php

    volumes:
    #- ./:/var/www/html:cached
    # mounts para vhost template de nginx
    - ./docker.d/etc/gotpl/presets/wordpress_alsur.conf.tmpl:/etc/gotpl/presets/wordpress_alsur.conf.tmpl:cached  

    # verificar que funciona el volumes_from
    # #mounts de WP 
    # - $PROJECT_WWW_PATH_BASE:/var/www/html:cached   #cached- base wp
    # - $PROJECT_WWW_PATH_PROJECT/plugins:/var/www/html/$VAR_WP_CONTENT/plugins:cached #carpeta plugins
    # - $PROJECT_WWW_PATH_PROJECT/themes:/var/www/html/$VAR_WP_CONTENT/themes:cached #carpeta themes
    # - $PROJECT_WWW_PATH_PROJECT/wp-config.php:/var/www/html/wp-config.php:cached #wp-config.php

    # #nosync
    # -  $PROJECT_WWW_PATH_NOSYNC/uploads:/var/www/html/$VAR_WP_CONTENT/uploads #carpeta themes
    # -  $PROJECT_WWW_PATH_NOSYNC/cache:/var/www/html/$VAR_WP_CONTENT/cache #carpeta themes
    # -  $PROJECT_WWW_PATH_NOSYNC/updraft:/var/www/html/$VAR_WP_CONTENT/updraft #carpeta themes
    # -  $PROJECT_WWW_PATH_NOSYNC/wflogs:/var/www/html/$VAR_WP_CONTENT/wflogs #carpeta themes

    #alsur networks
    networks:
      - traefik_net
      - containers_wp
      
    ports:  #debería ir a override o dev
    - '81:80'   

    ## Alternative for macOS users: Mutagen https://wodby.com/docs/stacks/wordpress/local#docker-for-mac
    #    - mutagen:/var/www/html
    labels:
      - traefik.enable=true # activar
      - traefik.http.routers.${PROJECT_NAME}_nginx.entrypoints=websecure 
      - traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_BASE_URL}`) #tiene que resolverse a nivel del docker server
      - traefik.http.routers.${PROJECT_NAME}_nginx.tls.certresolver=le #resolver para certificado (definido en traefik)

      - traefik.http.services.${PROJECT_NAME}_nginx.loadbalancer.server.port=80 #no parece necesario, solo si hay +1 puerto

      - traefik.docker.network=traefik_net #parece IMPRESCINDIBLE SI HAY MAS DE UNA RED

    # labels:
    # - traefik.http.routers.${PROJECT_NAME}_nginx.rule=Host(`${PROJECT_BASE_URL}`)
    # - traefik.http.routers.${PROJECT_NAME}_nginx.entrypoints=web
    # - traefik.http.routers.${PROJECT_NAME}_nginx_https.rule=Host(`${PROJECT_BASE_URL}`)
    # - traefik.http.routers.${PROJECT_NAME}_nginx_https.tls=true
    # - traefik.http.routers.${PROJECT_NAME}_nginx_https.entrypoints=web-secure

    # - traefik.http.routers.${PROJECT_NAME}_nginx.middlewares=${PROJECT_NAME}_nginx_https@docker
    # - traefik.http.middlewares.${PROJECT_NAME}_nginx_https.redirectscheme.scheme=https


    # - traefik.docker.network=backend_wp
    # - traefik.backend=wp


  crond:
    image: wodby/wordpress-php:$PHP_TAG
    container_name: "${PROJECT_NAME}_crond"
    environment:
      CRONTAB: "0 * * * * wp cron event run --due-now --path=/var/www/html"
    command: sudo -E LD_PRELOAD=/usr/lib/preloadable_libiconv.so crond -f -d 0
    volumes:
    #- ./:/var/www/html:cached
      - $PROJECT_WWW_PATH_BASE:/var/www/html:cached   #cached- base wp


###### mysql-backup
  mysql-backup:
    image: tiredofit/db-backup:latest
    container_name: "${PROJECT_NAME}_db-backup"
    volumes:
    - wp-mysql-backup:/backup/:rw
    environment:
    - DB_TYPE=mysql
    - DB_HOST=mariadb
    - DB_USER=root
    - DB_PASS=${DB_ROOT_PASSWORD:-K9AS9cBaSPTEK8dS}
    - DB_DUMP_FREQ=60
    - DB_DUMP_BEGIN=+10
    - DB_CLEANUP_TIME=1500
    - SPLIT_DB=TRUE
    - MD5=TRUE
    - COMPRESSION=GZ
    - PARALLEL_COMPRESSION=FALSE
    - DEBUG_MODE=FALSE
    - EXTRA_OPTS=--default-character-set=utf8mb4

    restart:          always
    # dns:
    #   - 172.22.1.254
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    # networks:
    #   - network
    networks:
      - containers_wp


#volumes:
## For macOS users (Mutagen)
#  mutagen:
## For Xdebug profiler
#  files:




  # en common  
  # mailhog:
  #   image: mailhog/mailhog
  #   container_name: "${PROJECT_NAME}_mailhog"
  #   labels:
  #   - "traefik.http.services.${PROJECT_NAME}_mailhog.loadbalancer.server.port=8025"
  #   - "traefik.http.routers.${PROJECT_NAME}_mailhog.rule=Host(`mailhog.${PROJECT_BASE_URL}`)"

#  postgres:
#    image: wodby/postgres:$POSTGRES_TAG
#    container_name: "${PROJECT_NAME}_postgres"
#    stop_grace_period: 30s
#    environment:
#      POSTGRES_PASSWORD: $DB_PASSWORD
#      POSTGRES_DB: $DB_NAME
#      POSTGRES_USER: $DB_USER
#    volumes:
#    - ./postgres-init:/docker-entrypoint-initdb.d # Place init file(s) here.
#    - /path/to/postgres/data/on/host:/var/lib/postgresql/data # I want to manage volumes manually.

#  apache:
#    image: wodby/apache:$APACHE_TAG
#    container_name: "${PROJECT_NAME}_apache"
#    depends_on:
#    - php
#    environment:
#      APACHE_LOG_LEVEL: debug
#      APACHE_BACKEND_HOST: php
#      APACHE_VHOST_PRESET: php
#    volumes:
#    - ./:/var/www/html:cached
## Alternative for macOS users: Mutagen https://wodby.com/docs/stacks/wordpress/local#docker-for-mac
#    - mutagen:/var/www/html
#    labels:
#    - "traefik.http.routers.${PROJECT_NAME}_apache.rule=Host(`${PROJECT_BASE_URL}`)"

#  varnish:
#    image: wodby/varnish:$VARNISH_TAG
#    container_name: "${PROJECT_NAME}_varnish"
#    depends_on:
#    - nginx
#    environment:
#      VARNISH_SECRET: secret
#      VARNISH_BACKEND_HOST: nginx
#      VARNISH_BACKEND_PORT: 80
#      VARNISH_CONFIG_PRESET: wordpress
#      VARNISH_ALLOW_UNRESTRICTED_PURGE: 1
#    labels:
#    - "traefik.http.services.${PROJECT_NAME}_varnish.loadbalancer.server.port=6081"
#    - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"

#  redis:
#    container_name: "${PROJECT_NAME}_redis"
#    image: wodby/redis:$REDIS_TAG

#  adminer:
#    container_name: "${PROJECT_NAME}_adminer"
#    image: wodby/adminer:$ADMINER_TAG
#    environment:
##      # For PostgreSQL:
##      ADMINER_DEFAULT_DB_DRIVER: pgsql
#      ADMINER_DEFAULT_DB_HOST: $DB_HOST
#      ADMINER_DEFAULT_DB_NAME: $DB_NAME
#    labels:
#    - "traefik.http.routers.${PROJECT_NAME}_adminer.rule=Host(`adminer.${PROJECT_BASE_URL}`)"

#  webgrind:
#    image: wodby/webgrind:$WEBGRIND_TAG
#    container_name: "${PROJECT_NAME}_webgrind"
#    environment:
#      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug/profiler
#    labels:
#    - "traefik.http.routers.${PROJECT_NAME}_webgrind.rule=Host(`webgrind.${PROJECT_BASE_URL}`)"
#    volumes:
#    - files:/mnt/files

#  pma:
#    image: phpmyadmin/phpmyadmin
#    container_name: "${PROJECT_NAME}_pma"
#    environment:
#      PMA_HOST: $DB_HOST
#      PMA_USER: $DB_USER
#      PMA_PASSWORD: $DB_PASSWORD
#      PHP_UPLOAD_MAX_FILESIZE: 1G
#      PHP_MAX_INPUT_VARS: 1G
#    labels:
#    - "traefik.http.routers.${PROJECT_NAME}_pma.rule=Host(`pma.${PROJECT_BASE_URL}`)"

#  athenapdf:
#    image: arachnysdocker/athenapdf-service:$ATHENAPDF_TAG
#    container_name: "${PROJECT_NAME}_athenapdf"
#    environment:
#      WEAVER_AUTH_KEY: weaver-auth-key
#      WEAVER_ATHENA_CMD: "athenapdf -S"
#      WEAVER_MAX_WORKERS: 10
#      WEAVER_MAX_CONVERSION_QUEUE: 50
#      WEAVER_WORKER_TIMEOUT: 90
#      WEAVER_CONVERSION_FALLBACK: "false"

#  blackfire:
#    image: blackfire/blackfire
#    container_name: "${PROJECT_NAME}_blackfire"
#    environment:
#      BLACKFIRE_SERVER_ID: XXXXX
#      BLACKFIRE_SERVER_TOKEN: YYYYY

#  solr:
#    image: wodby/solr:$SOLR_TAG
#    container_name: "${PROJECT_NAME}_solr"
#    environment:
#      SOLR_HEAP: 1024m
#    labels:
#    - "traefik.http.services.${PROJECT_NAME}_solr.loadbalancer.server.port=8983"
#    - "traefik.http.routers.${PROJECT_NAME}_solr.rule=Host(`solr.${PROJECT_BASE_URL}`)"

#  elasticsearch:
#    image: wodby/elasticsearch:$ELASTICSEARCH_TAG
#    environment:
#      ES_JAVA_OPTS: "-Xms500m -Xmx500m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1

#  kibana:
#    image: wodby/kibana:$KIBANA_TAG
#    depends_on:
#    - elasticsearch
#    labels:
#    - "traefik.http.services.${PROJECT_NAME}_kibana.loadbalancer.server.port=5601"
#    - "traefik.http.routers.${PROJECT_NAME}_kibana.rule=Host(`kibana.${PROJECT_BASE_URL}`)"

#  node:
#    image: wodby/node:$NODE_TAG
#    container_name: "${PROJECT_NAME}_node"
#    working_dir: /app
#    labels:
#    - "traefik.http.services.${PROJECT_NAME}_node.loadbalancer.server.port=3000"
#    - "traefik.http.routers.${PROJECT_NAME}_node.rule=Host(`node.${PROJECT_BASE_URL}`)"
#    expose:
#    - "3000"
#    volumes:
#    - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

#  memcached:
#    container_name: "${PROJECT_NAME}_memcached"
#    image: wodby/memcached:$MEMCACHED_TAG

#  opensmtpd:
#    container_name: "${PROJECT_NAME}_opensmtpd"
#    image: wodby/opensmtpd:$OPENSMTPD_TAG

#  rsyslog:
#    container_name: "${PROJECT_NAME}_rsyslog"
#    image: wodby/rsyslog:$RSYSLOG_TAG

#  xhprof:
#    image: wodby/xhprof:$XHPROF_TAG
#    restart: always
#    volumes:
#    - files:/mnt/files
#    labels:
#    - "traefik.http.routers.${PROJECT_NAME}_xhprof.rule=Host(`xhprof.${PROJECT_BASE_URL}`)"

#   portainer:
#     image: portainer/portainer
#     container_name: "${PROJECT_NAME}_portainer"
#     command: --no-auth -H unix:///var/run/docker.sock
#     volumes:
#     - /var/run/docker.sock:/var/run/docker.sock
#     labels:
#     - "traefik.http.routers.${PROJECT_NAME}_portainer.rule=Host(`portainer.${PROJECT_BASE_URL}`)"

#   traefik:
#     image: traefik:v2.0
#     container_name: "${PROJECT_NAME}_traefik"
#     command: --api.insecure=true --providers.docker
#     ports:
#     - '8000:80'
# #    - '8080:8080' # Dashboard
#     volumes:
#     - /var/run/docker.sock:/var/run/docker.sock

#  mutagen:
#    build:
#      context: .
#      dockerfile: mutagen/Dockerfile
#    init: true
#    container_name: "mutagen"
#    volumes:
#    - mutagen:/var/www/html

# ALSUR
# @TODO  - TZ=${TIMEZONE}

